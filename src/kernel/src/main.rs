#![cfg_attr(not(miri), no_std)]
#![cfg_attr(not(miri), no_main)]
#![cfg_attr(miri, allow(dead_code))]
#![feature(panic_info_message)]
#![feature(strict_provenance)]
#![feature(nonzero_ops)]
#![feature(custom_test_frameworks)]
#![feature(const_mut_refs)]
#![feature(option_take_if)]
#![feature(non_null_convenience)]
#![feature(pointer_is_aligned)]
#![feature(exposed_provenance)]
#![feature(lazy_cell)]
#![feature(let_chains)]
#![test_runner(test::test_runner)]
#![reexport_test_harness_main = "test_main"]

use crate::{
    interrupts::plic,
    io::uart::QEMU_UART,
    memory::page_tables,
    pci::enumerate_devices,
    processes::{scheduler, timer},
};

mod asm;
mod assert;
mod autogenerated;
mod cpu;
mod device_tree;
mod interrupts;
mod io;
mod klibc;
mod logging;
mod memory;
mod panic;
mod pci;
mod processes;
mod sbi;
mod syscalls;

mod test;

#[macro_use]
extern crate alloc;

extern "C" {
    static HEAP_START: usize;
    static HEAP_SIZE: usize;
}

#[no_mangle]
extern "C" fn kernel_init(hart_id: usize, device_tree_pointer: *const ()) {
    QEMU_UART.lock().init();

    println!("Hello World from YaROS!\n");
    println!("Hart ID: {}", hart_id);
    println!("Device Tree Pointer: {:p}", device_tree_pointer);

    let version = sbi::extensions::base_extension::sbi_get_spec_version();
    info!("SBI version {}.{}", version.major, version.minor);
    assert!(
        (version.major == 0 && version.minor >= 2) || version.major > 0,
        "Supported SBI Versions >= 0.2"
    );

    let dtb = device_tree::parse_and_copy(device_tree_pointer);

    unsafe {
        info!("Initializing page allocator");
        info!(
            "Heap Start: {:#x}-{:#x} (size: {:#x})",
            HEAP_START,
            HEAP_START + HEAP_SIZE,
            HEAP_SIZE
        );
        memory::init_page_allocator(HEAP_START, HEAP_SIZE);
    }

    assert!(
        dtb.get_reserved_areas().is_empty(),
        "There should be no reserved memory regions"
    );

    #[cfg(test)]
    test_main();

    let parsed_structure_block = dtb
        .get_structure_block()
        .parse()
        .expect("DTB must be parsable");

    let pci_information =
        pci::parse(&parsed_structure_block).expect("pci information must be parsable");
    println!("pci information: {:#x?}", pci_information);

    let pci_devices = enumerate_devices(&pci_information);
    println!("Got {:#x?}", pci_devices);

    page_tables::activate_page_table(&page_tables::KERNEL_PAGE_TABLES.lock());

    interrupts::set_sscratch_to_kernel_trap_frame();

    plic::init_uart_interrupt();

    scheduler::initialize();
    timer::set_timer(0);
}
