use std::error::Error;
use std::io::Write;
use std::path::Path;
use std::process::Command;

fn main() -> Result<(), Box<dyn Error>> {
    println!("cargo:rerun-if-changed=qemu.ld");
    println!("cargo:rerun-if-changed=../userspace/");
    println!("cargo:rustc-link-arg-bin=kernel=-Tsrc/kernel/qemu.ld");

    build_userspace_programs()?;
    generate_userspace_programs_include()?;

    Ok(())
}

fn generate_userspace_programs_include() -> Result<(), Box<dyn Error>> {
    let mut userspace_programs =
        std::fs::File::create("../kernel/src/autogenerated/userspace_programs.rs")?;

    writeln!(
        userspace_programs,
        "use crate::klibc::macros::include_bytes_align_as;\n"
    )?;

    let mut programs: Vec<(String, String)> = Vec::new();

    for entry in std::fs::read_dir("../kernel/compiled_userspace")? {
        let entry = entry?;
        let path = entry.path();
        let original_file_name = path.file_name().unwrap().to_str().unwrap();
        let file_name = original_file_name.to_uppercase();

        programs.push((original_file_name.to_owned(), file_name.clone()));

        writeln!(
            userspace_programs,
            "pub static {}: &[u8] = include_bytes_align_as!(u64, \"../../compiled_userspace/{}\");",
            file_name, original_file_name
        )?;
    }

    writeln!(userspace_programs)?;
    write!(
        userspace_programs,
        "pub static PROGRAMS: &[(&str, &[u8])] = &["
    )?;
    for (original_file_name, file_name) in programs {
        write!(
            userspace_programs,
            "(\"{}\", {}),",
            original_file_name, file_name
        )?;
    }
    write!(userspace_programs, "];")?;

    Ok(())
}

fn build_userspace_programs() -> Result<(), Box<dyn Error>> {
    let profile = std::env::var("PROFILE")?;

    let compiled_userspace_path = Path::new("../kernel/compiled_userspace");

    let _ = std::fs::remove_dir_all(compiled_userspace_path);

    let mut command = Command::new("cargo");
    command.current_dir("../userspace");

    command.args([
        "build",
        "--bins",
        "--target-dir",
        "../../target-userspace",
        "--out-dir",
        compiled_userspace_path.to_str().unwrap(),
        "-Z",
        "unstable-options",
    ]);

    if profile == "release" {
        command.arg("--release");
    }

    let status = command.status()?;
    if !status.success() {
        return Err(From::from("Failed to build userspace programs"));
    }

    Ok(())
}
